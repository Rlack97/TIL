이진수의 소수점 표현

def conver_float(num):
    complete = ''
    for i in range(1,13):
        if num >= 2**(-i):
            num -= 2**(-i)
            complete += '1'
            if num == 0:
                break
        else:
            complete += '0'
    else: 
        return 'overflow'

    return complete

# 소수를 이진수로 변환하는 함수 설정

# 삽입한 값이 1/2의 거듭제곱보다 크면 해당 자리수의 이진수를 1로 하고 그 값만큼 빼 줌.
# 작으면 0으로 입력하고 다음 거듭제곱의 값을 비교
# 딱 맞아 떨어지면 거기서 종료되지만, 계속 수가 남아서 12번 이상 계산이 지속되면
# else 문으로 넘어가서 overflow 문자열을 반환

순열 ( 순서 상관 있음 )

재귀 구현
p = 순열을 만드려는 데이터 리스트 값

perm(i(현재 인덱스값),k(원하는 순열의 갯수)
    if i == k :
        print(p) # 완성된 배열에 대한 작업. 여기선 출력을 진행한다.
    else:
        for j in range(i,k): # 현재 인덱스에서부터 마지막 인덱스까지
            p[i],p[j] = p[j],p[i] # 두 인덱스의 값을 교환하는 것으로 모든 경우의 수 구현
            perm(i+1,k)   # 다음 인덱스로 진행
            p[i],p[j] = p[j],p[i]  # 교환했던 두 값을 되돌려놓고, j 값을 증가시켜서 반복




조합
재귀, N개에서 R개를 고르는 조합. s는 선택할 수 있는 구간의 시작.
def nCr(n,r,s):
    if r == 0:               # 모든 수를 다 골랐을 때
        print(*comb)       # comb에 저장해 둔 조합에 대한 작업을 처리
    else:
        for i in range(s,n-r+1): # 구간 시작부부터, n-r까지
            comb[r-1] = A[i]    # 
            nCr(c,r-1,i+1)

comb = [0]*r  # 조합을 저장할 리스트

nCr(10,3,0)

비트연산

부분집합 생성
arr = 대상 집합 리스트
n = len(arr)

for i in range(1,1<<n)
    for j in range(0,n):
        if i & (1<<j) : # j번 비트가 0이 아니면 arr[j]가 부분집합의 원소임.
            # 해당 부분집합인 arr[j]에 대해 원하는 작업 수행
    